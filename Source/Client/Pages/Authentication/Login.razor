@page "/login"
@page "/login/{isExpired}"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject DialogService dialogService
@inject HttpClient httpClient
@inject IToastService toastService

<div class="card rounded-corners max-width-small mx-auto">
    <h1 class="card-header">Wishlist Website</h1>
    <div class="card-body">

        <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(1.5)">
            <EditForm OnValidSubmit="OnSubmit" Model="loginRequest">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(problem))
                {
                    <div class="alert-danger">ERROR! @problem</div>
                }
                else if (!loading)
                {
                    if (Users.Count == 0)
                    {
                        <div class="alert alert-primary">No users yet! Register to be the first.</div>
                        usersExist = false;
                    }
                    else
                    {
                        <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(1.5)">
                            <div class="form-group">
                                <ValidationMessage For="(() => loginRequest.UserName)" />
                                <label for="inputUsername">You are?</label>

                                <InputSelect @bind-Value="loginRequest.UserName" class="form-control">
                                    <option value="">...</option>
                                    @foreach (var usr in Users.OrderBy(u => u.DisplayText))
                                    {
                                        <option value="@usr.Value">@usr.DisplayText</option>
                                    }
                                </InputSelect>
                            </div>

                            <CommonInput Placeholder="Password"
                                 ExtraCSS="max-w150-control"
                                 InputType="password"
                                 @bind-Value="loginRequest.Password"
                                 ValidationFor="@(() => loginRequest.Password)"
                                 Icon="fa-key"></CommonInput>

                        </Animate>
                    }
                }

                @if (usersExist)
                {
                    <button disabled="@loading" class="btn btn-primary" type="submit">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </button>
                }
                <NavLink href="register" class="btn btn-link">Register</NavLink>
                @if (loginRequest != null && !string.IsNullOrEmpty(loginRequest.UserName))
                {
                    <button @onclick="@(() => SendPasswordLink())" class="btn btn-link" type="button">Forgot Password?</button>
                }
            </EditForm>
        </Animate>
    </div>
</div>

<!-- credits -->
<div class="text-center mt-4">
    <p>
        Need help?  Contact Dan for assistance.
    </p>
</div>